<script>
  var famTree= [
  {
    name: "Grandfather",
    gender: "m",
    spouse: {
      name: "Grandmother",
      gender: "f",
      spouse: "already listed"
    },
    children: [
      {
        name: "uncle",
        gender: "m",
        spouse: {
          name: "Married Aunt",
          gender: "f",
          spouse: "already listed"
        },
        children: [
          {
            name: 'Cousin',
            gender: "f"
          }
        ]
      },
      {
        name: "Aunt",
        gender: "f",
        spouse: {
          name: "Married Uncle",
          gender: "m",
          spouse: "already listed"
        }
      },
      {
        name: "Aunt",
        gender: "f"
      },
      {
        name: "Father",
        gender: "m",
        spouse: {
          name: "Mother",
          gender: "f",
          spouse: "already listed"
        },
        children: [
          {
            name: "Self",
            gender: "m",
            spouse: {
              name: "Wife",
              gender: "f",
              spouse: "already listed"
            },
            children: [
              {
                name: 'Son',
                gender: "m",
                spouse: {
                  name: "Daughter-in-law",
                  gender: "f",
                  spouse: "already listed"
                }
              },
              {
                name: 'Daughter',
                gender: "f",
                spouse: {
                  name: "Son-in-law",
                  gender: "m",
                  spouse: "already listed"
                }
              }
            ]
          },
          {
            name: 'Sister',
            gender: "f",
            spouse: {
              name: "Brother-in-law",
              gender: "m",
              spouse: "already listed"
            },
            children: [
              {
                name: "Nephew",
                gender: "m",
              },
              {
                name: "Niece",
                gender: "f",
              }
            ]
          }
        ]
      }
    ]
  }
]

 var famTree2= [
  {
    name: "Grandfather",
    gender: "m",
    spouse: {
      name: "Grandmother",
      gender: "f",
      spouse: "already listed"
    },
    children: [
      {
        name: "Aunt",
        gender: "f",
        spouse: {
          name: "Married Uncle",
          gender: "m",
          spouse: "already listed"
        },
        children: [
          {
            name: 'Cousin',
            gender: "f",
            spouse: {
              name: "Married to Cousin",
              gender: "m",
              spouse: "already listed"
            }
          }
        ]
      },
      {
        name: "Uncle",
        gender: "m",
        spouse: {
          name: "Married Aunt",
          gender: "f",
          spouse: "already listed"
        },
        children: [
          {
            name: 'Cousin',
            gender: "f"
          }
        ]
      },
      {
        name: "Aunt",
        gender: "f",
        spouse: {
          name: "Married Uncle",
          gender: "m",
          spouse: "already listed"
        }
      },
      {
        name: "Aunt",
        gender: "f"
      },
      {
        name: "Father",
        gender: "m",
        spouse: {
          name: "Mother",
          gender: "f",
          spouse: "already listed"
        },
        children: [
          {
            name: "Self",
            gender: "m",
            spouse: {
              name: "Wife",
              gender: "f",
              spouse: "already listed"
            },
            children: [
              {
                name: 'Son',
                gender: "m",
                spouse: {
                  name: "Daughter-in-law",
                  gender: "f",
                  spouse: "already listed"
                }
              },
              {
                name: 'Daughter',
                gender: "f",
                spouse: {
                  name: "Son-in-law",
                  gender: "m",
                  spouse: "already listed"
                }
              }
            ]
          },
          {
            name: 'Sister',
            gender: "f",
            spouse: {
              name: "Brother-in-law",
              gender: "m",
              spouse: "already listed"
            },
            children: [
              {
                name: "Nephew",
                gender: "m",
              },
              {
                name: "Niece",
                gender: "f",
              }
            ]
          }
        ]
      }
    ]
  }
]


var FamilyTree = function(jsonObject){

  this.parseGenerations = function(jsonObject){
    var store = [];

    var generations = 1

    while (generations < 5) {
      var current;

      if(store[generations - 2]){
        current = store[generations - 2]
        store[generations - 1] = []

        for (var i = 0, ii = current.length; i < ii; i ++) {
          if (current[i].children){
            var childs = current[i].children
            for (var y = 0, yy = childs.length; y < yy; y ++) {
              childs[y].parentNode = current[i].geneId;
              childs[y].geneId = current[i].geneId + '|' + y;
            }
            store[generations - 1] = store[generations - 1].concat(childs);
          }
        }
      }
      else{
        store[0] = jsonObject
        for (var z = 0, zz = store[0].length; z < zz; z++) {
          store[0][z].geneId = '0|' + z
        };
      }
      generations ++
    }

    return store;
  }

  this.addSpouses = function(rows){
    var result = []
    for (var i = 0, ii = rows.length; i < ii; i++) {
      result[i] = []
      for (var y = 0, yy = rows[i].length; y < yy; y++) {
        subj = rows[i][y]

        if (subj.spouse && subj.spouse != 'already listed'){
          subj.spouse.marriedGeneId = subj.geneId

          if (subj.parentNode){
            subj.spouse.parentNode = subj.parentNode
          }
          if (subj.gender == 'm'){
            result[i].push(subj);
            result[i].push(subj.spouse);
          }
          else{
            result[i].push(subj.spouse);
            result[i].push(subj);
          }
        }
        else{
          result[i].push(subj);
        }
      };
    };
    return result
  }

  this.findLongestRow = function(rows){
    var longestLength = 0

    for (var i = 0, ii = rows.length; i < ii; i++) {
      if (rows[i].length > longestLength){
        longestLength = rows[i].length;
      }
    };

    return longestLength
  }

  this.spaceRows = function(longest, rows){
    var result = rows

    var rowCount = [];
    for (var i = rows.length - 1; i >-1; i--) {

      rowCount[i] = {couples: [], standAlones: [], families: {}}

      for (var x = 0, xx = rows[i].length; x < xx; x++) {
        var subject = rows[i][x];
        subject.spouse ? rowCount[i].couples.push(subject) : rowCount[i].standAlones.push(subject)
        if (!rowCount[i].families[subject.parentNode]){
          rowCount[i].families[subject.parentNode] = {startIndex: x, members: []}
        }
        rowCount[i].families[subject.parentNode].members.push(subject)
      };

      var famKeys = Object.keys(rowCount[i].families);

      if (famKeys.length == 1 && result[i].length < longest){
        var beginning = true
        while (result[i].length < longest) {
          var atIndex;

          if(beginning){
            atIndex = 0
            rowCount[i].families[famKeys[0]].startIndex ++;
          }
          else{
            atIndex = result[i].length
          }
          result[i].splice(atIndex, 0, {gap: true})
          beginning = !beginning
        }
      }
      else if (result[i].length < longest){
        var count =  0

        while (result[i].length < longest) {
          var family = rowCount[i].families[famKeys[count]];

          var range = family.startIndex + family.members.length;
          result[i].splice(range, 0, {gap: true})

          for (var z = 0, zz = famKeys.length; z < zz; z ++) {
            fam = rowCount[i].families[famKeys[z]];
            if (fam.startIndex >= range){
              fam.startIndex ++;
            }
          };

          if (famKeys.length - 1 < count){
            count ++;
          }
          else{
            count = 0;
          }
        }
      }
    };

    var readyAndChecked = false

    var move = function (input_array, old_index, new_index) {
      if (new_index >= input_array.length) {
        var k = new_index - input_array.length;
        while ((k--) + 1) {
          input_array.push(undefined);
        }
      }
      input_array.splice(new_index, 0, input_array.splice(old_index, 1)[0]);
      return input_array; // for testing purposes
    };

    while (!readyAndChecked){
      readyAndChecked = true
      for (var q = 0, qq = result.length; q < qq; q++) {
        var current = result[q]
        var nextRow = result[q + 1]
        var nextRowCount = rowCount[q + 1]

        if (nextRow){
          for (var w = 0, ww = result[q].length; w < ww; w++) {
            if(result[q][w].geneId && nextRowCount.families[result[q][w].geneId]){
              var famRecord = nextRowCount.families[result[q][w].geneId]

              var adjuster = 0

              if (result[q][w].gender == 'f'){
                adjuster ++;
              }

              var range = {start: (famRecord.startIndex - adjuster), end: (famRecord.startIndex + famRecord.members.length)}

              if (range.start > w){
                if(result[q + 1][w].gap){
                  for(argh = 0, arghargh = famRecord.members.length; argh < arghargh; argh ++){
                    move(result[q + 1], range.start + argh, w + argh)

                    if(argh === 0){
                      famRecord.startIndex = w
                    }
                  }
                }
              }
              else if (range.end < w){
                if(result[q + 1][w].gap){
                  for(argh = 0, arghargh = famRecord.members.length; argh < arghargh; argh ++){
                    move(result[q + 1], range.end - argh - 1,  w - argh)

                    if(argh === arghargh - 1){
                      famRecord.startIndex = w - argh
                    }
                  }
                }
              }
            }
          };
        }
      }
    }

    return {rows: result, rowCounts: rowCount}
  }

  this.generationRows = this.parseGenerations(jsonObject);
  this.generationRowsWithSpouses = this.addSpouses(this.generationRows);
  this.longestRow = this.findLongestRow(this.generationRowsWithSpouses)
  this.spacedRows = this.spaceRows(this.longestRow, this.generationRowsWithSpouses);

}



x = new FamilyTree(famTree)

// console.log(x.spacedRows)
// console.log(x.spacedRows.rows)

// var FamilyTree.prototype.writeToDom = function(){

// }

famtree2  = new FamilyTree(famTree2)

</script>









<style>

  .fam-tree-grid{
    width: 1850px;
    height: 1850px;
    background-color: orange;

    /*remove odd spaces*/
    font-size: 0;
  }

  .fam-tree-grid div{
    box-sizing: border-box;
  }

  .fam-tree-grid .person-row{

    width: 100%;
    height: 17px;
  }

  .fam-tree-grid .person-row .person-square{
    vertical-align: top;
    display: inline-block;
    width: 157.25px;
    height: 18px;
    padding: 0;
    margin: 0;
    border: 1px solid black;
    box-sizing: border-box;
  }

  .fam-tree-grid .person-row .person-square p{
    margin-top: 0;
    text-align: center;
    font-size: 15px;
    box-sizing: border-box;
  }

  .fam-tree-grid .person-row .relation-column{
    display: inline-block;
    vertical-align: top;
    width: 27.25px;
    height: 18px;
    padding: 0;
    margin: 0;
  }


  .fam-tree-grid .relation-row{
    width: 100%;
    height: 1%;
  }

  .fam-tree-grid .relation-row .person-square{
    vertical-align: top;
    display: inline-block;
    width: 157.25px;
    height: 18px;

    padding: 0;
    margin: 0;
  }

  .fam-tree-grid .relation-row .relation-column{
    display: inline-block;
    vertical-align: top;
    width: 27.25px;
    height: 18px;

    padding: 0;
    margin: 0;
  }


  .top-inner-cross{
    width: 100%;
    display: inline-block;
    height: 50%;
  }


  .bottom-inner-cross{
    width: 100%;
    display: inline-block;
    height: 50%;
  }


  .top-inner-cross .left-side{
    width: 50%;
    display: inline-block;
    height: 100%;

  }

  .top-inner-cross .right-side{
    width: 50%;
    display: inline-block;
    height: 100%;
  }

  .bottom-inner-cross .left-side{
    width: 50%;
    display: inline-block;
    height: 100%;
  }

  .bottom-inner-cross .right-side{
    width: 50%;
    display: inline-block;
    height: 100%;
  }




  .bisected .top-inner-cross{
    height: 50%;
    border-bottom: 1px solid black;
  }

  .bottom-right .top-inner-cross {
    width: 100%;
    height: 50%;
  }

  .bottom-right .bottom-inner-cross {
    width: 100%;
    height: 50%;
  }


  .bottom-right .top-inner-cross .right-side{
    border-bottom: 1px solid black;
  }

  .bottom-right .bottom-inner-cross .left-side{
    border-right: 1px solid black;

  }

  .bottom-right .bottom-inner-cross .right-side{
    display: inline-block;
  }

  .bottom-left .top-inner-cross .left-side{
    border-bottom: 1px solid black;
  }

  .bottom-left .bottom-inner-cross .left-side{
    border-right: 1px solid black;
  }


  .top-right-top-left .top-inner-cross {
    border-bottom: 1px solid black;
  }

  .top-right-top-left .top-inner-cross .left-side{
    border-right: 1px solid black;
  }



  .bottom-right-bottom-left .top-inner-cross {
    border-bottom: 1px solid black;
  }

  .bottom-right-bottom-left .bottom-inner-cross .left-side{
    border-right: 1px solid black;
  }


  .top-left .top-inner-cross .left-side{
    border-right: 1px solid black;
    border-bottom: 1px solid black;
  }


  .top-right .top-inner-cross .right-side{
    border-left: 1px solid black;
    border-bottom: 1px solid black;
  }



</style>
<div class="fam-tree-grid">
  <div class="person-row">
    <div class="person-square">

    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">

    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Grandfather</p>
    </div>
    <div class="relation-column bottom-right-bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Grandmother</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">

    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">

    </div>
  </div>
  <div class="relation-row">
    <div class="person-square bottom-right">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-right-bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column top-right-top-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-right-bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">

    </div>
  </div>
  <div class="person-row">
    <div class="person-square">
      <p>Uncle</p>
    </div>
    <div class="relation-column bottom-right-bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Married Aunt</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Married Uncle</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Aunt</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Aunt</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Father</p>
    </div>
    <div class="relation-column bottom-right-bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Mother</p>
    </div>
  </div>
  <div class="relation-row">
    <div class="person-square bottom-right">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column top-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">

    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-right">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column top-right-top-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
  </div>
  <div class="person-row">
    <div class="person-square">
      <p>Cousin</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">

    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">

    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Self</p>
    </div>
    <div class="relation-column bottom-right-bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Wife</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Brother-in-law</p>
    </div>
    <div class="relation-column bottom-right-bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Sister</p>
    </div>
  </div>
  <div class="relation-row">
    <div class="person-square">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-right">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column top-right-top-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-right">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column top-right-top-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square bottom-left">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
  </div>
  <div class="person-row">
    <div class="person-square">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="relation-column">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Son</p>
    </div>
    <div class="relation-column bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Daughter-in-law</p>
    </div>
    <div class="relation-column">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Son-in-law</p>
    </div>
    <div class="relation-column  bisected">
      <div class="top-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
      <div class="bottom-inner-cross">
        <div class="left-side"></div>
        <div class="right-side"></div>
      </div>
    </div>
    <div class="person-square">
      <p>Daughter</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Nephew</p>
    </div>
    <div class="relation-column">

    </div>
    <div class="person-square">
      <p>Niece</p>
    </div>
  </div>
</div>


<div class="fam-tree-grid" id="fill-me">

<div>


<div class="fam-tree-grid" id="fill-me2">

<div>

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<p>END</p>



<script>

var treeGenerator = function(famedTree, filler){
  for (var y = 0, yy = famedTree.spacedRows.rows.length; y < yy; y++) {
    var row = document.createElement("Div")
    row.className = 'person-row'

    var relationRow = document.createElement("Div")
    relationRow.className = 'relation-row'

    for (var i = 0, ii = famedTree.spacedRows.rows[y].length; i < ii; i++) {
      var cell = document.createElement("Div")
      var ptag = document.createElement("P")
      cell.className = 'person-square'


      if (famedTree.spacedRows.rows[y][i].name){
        ptag.innerHTML  = famedTree.spacedRows.rows[y][i].name
      }

      row.appendChild(cell)
      cell.appendChild(ptag)

      var relRowstatus = ''
      if (famedTree.spacedRows.rows[y + 1]){

        var nextRowCorrespondingPerson = famedTree.spacedRows.rows[y + 1][i]
        var prevInLine = famedTree.spacedRows.rows[y + 1][i - 1]
        var nextInLine = famedTree.spacedRows.rows[y + 1][i + 1]

        if(nextRowCorrespondingPerson && nextRowCorrespondingPerson.parentNode){
          if(nextRowCorrespondingPerson.geneId){

            var famData = famedTree.spacedRows.rowCounts[y + 1].families[nextRowCorrespondingPerson.parentNode]
            if (famData.startIndex > i - 1) {
              relRowstatus = "bottom-right"
            }
            else if((nextRowCorrespondingPerson.gender =='f' && nextRowCorrespondingPerson.spouse && famData.startIndex > i - 2) || famData.startIndex + famData.members.length < i + 1) {
              if(famedTree.spacedRows.rows[y][i].geneId == nextRowCorrespondingPerson.parentNode || famedTree.spacedRows.rows[y][i].marriedGeneId == nextRowCorrespondingPerson.parentNode){
                relRowstatus = "bottom-left"
              }
              else{
                relRowstatus = "bottom-right"
              }
            }
            else if(famData.startIndex + famData.members.length < i + 1){
              relRowstatus = "bottom-left"
            }
            else if(!nextInLine || (nextInLine && nextInLine.parentNode == nextRowCorrespondingPerson.parentNode && nextInLine.marriedGeneId && famData.startIndex + famData.members.length < i + 3)){
              if(nextRowCorrespondingPerson.name === 'Son'){
                console.log(i)
                console.log(famData.startIndex)
              }
              relRowstatus = "bottom-left"
            }
            else{
              relRowstatus = "bottom-right-bottom-left"
            }
          }
          else if (nextRowCorrespondingPerson.marriedGeneId){
            if (prevInLine && prevInLine.parentNode == nextRowCorrespondingPerson.parentNode){
              if (nextInLine && nextInLine.parentNode == nextRowCorrespondingPerson.parentNode){
                relRowstatus = "bisected"
              }
            }
          }
        }
      }


      var relRowCell = document.createElement("Div")
      relRowCell.className = 'person-square'

      if(relRowstatus){
        relRowCell.className = relRowCell.className + ' ' + relRowstatus
      }

      var relRowTopper = document.createElement("Div")
      relRowTopper.className = "top-inner-cross"
      var relRowBottom = document.createElement("Div")
      relRowBottom.className = "bottom-inner-cross"

      relRowRightSideTop = document.createElement("Div")
      relRowRightSideTop.className = "right-side"
      relRowRightSideBottom = document.createElement("Div")
      relRowRightSideBottom.className = "right-side"

      relRowLeftSideTop = document.createElement("Div")
      relRowLeftSideTop.className = "left-side"
      relRowLeftSideBottom = document.createElement("Div")
      relRowLeftSideBottom.className = "left-side"

      relRowTopper.appendChild(relRowLeftSideTop)
      relRowTopper.appendChild(relRowRightSideTop)

      relRowBottom.appendChild(relRowLeftSideBottom)
      relRowBottom.appendChild(relRowRightSideBottom)

      relRowCell.appendChild(relRowTopper)
      relRowCell.appendChild(relRowBottom)

      relationRow.appendChild(relRowCell)


      if (i != ii - 1) {
        var relationCell = document.createElement("Div")
        relationCell.className = "relation-column"

        var topper = document.createElement("Div")
        topper.className = "top-inner-cross"
        var bottom = document.createElement("Div")
        bottom.className = "bottom-inner-cross"

        rightSideTop = document.createElement("Div")
        rightSideTop.className = "right-side"
        rightSideBottom = document.createElement("Div")
        rightSideBottom.className = "right-side"

        leftSideTop = document.createElement("Div")
        leftSideTop.className = "left-side"
        leftSideBottom = document.createElement("Div")
        leftSideBottom.className = "left-side"

        topper.appendChild(leftSideTop)
        topper.appendChild(rightSideTop)

        bottom.appendChild(leftSideBottom)
        bottom.appendChild(rightSideBottom)

        relationCell.appendChild(topper)
        relationCell.appendChild(bottom)

        var classedName = 'relation-column'


        if (famedTree.spacedRows.rows[y][i].spouse && famedTree.spacedRows.rows[y][i].gender == 'm'){
          if (famedTree.spacedRows.rows[y][i].children && famedTree.spacedRows.rows[y][i].children.length > 0 ){
            classedName = classedName + ' bottom-right-bottom-left'
          }
          else if (famedTree.spacedRows.rows[y][i].spouse == 'already listed' && famedTree.spacedRows.rows[y][i + 1].children && famedTree.spacedRows.rows[y][i + 1].children.length > 0 ){
            classedName = classedName + ' bottom-right-bottom-left'
          }
          else{
            classedName = classedName + ' bisected'
          }
        }


        relationCell.className = classedName

        row.appendChild(relationCell)


        var relRelRowCell = document.createElement("Div")
        relRelRowCell.className = 'relation-column'


        if(relRowstatus){
          if(relRowstatus == 'bisected' || relRowstatus == 'bottom-right' || relRowstatus == 'bottom-right-bottom-left'){
            if(nextInLine.name){
              if(nextInLine.geneId && nextInLine.parentNode == nextRowCorrespondingPerson.parentNode){
                if(famedTree.spacedRows.rows[y][i].name && ((famedTree.spacedRows.rows[y][i].geneId === nextRowCorrespondingPerson.parentNode) || famedTree.spacedRows.rows[y][i + 1].geneId === nextRowCorrespondingPerson.parentNode)){
                  relRelRowCell.className = relRelRowCell.className + " top-right-top-left"
                }
                else{
                  relRelRowCell.className = relRelRowCell.className + " bisected"
                }
              }
              else if(famedTree.spacedRows.rows[y + 1][i + 2] && famedTree.spacedRows.rows[y + 1][i + 2].geneId && famedTree.spacedRows.rows[y + 1][i + 2].parentNode == famedTree.spacedRows.rows[y + 1][i + 2].parentNode){
                relRelRowCell.className = relRelRowCell.className + " bisected"
              }
              else if(famedTree.spacedRows.rows[y + 1][i + 3] && famedTree.spacedRows.rows[y + 1][i + 3].geneId && famedTree.spacedRows.rows[y + 1][i + 3].parentNode == famedTree.spacedRows.rows[y + 1][i + 3].parentNode){
                relRelRowCell.className = relRelRowCell.className + " bisected"
              }
            }
            else{
              relRelRowCell.className = relRelRowCell.className + " top-left"
            }
          }
        }
        else{
          if (famedTree.spacedRows.rows[y + 1] && (famedTree.spacedRows.rows[y][i].name == 'Married Uncle')){
            if(famedTree.spacedRows.rows[y + 1]){
              var parentNodeInQuestion = famedTree.spacedRows.rows[y + 1][i + 1].parentNode
              if(parentNodeInQuestion){
                if((parentNodeInQuestion == famedTree.spacedRows.rows[y][i].marriedGeneId) || (parentNodeInQuestion == famedTree.spacedRows.rows[y][i].geneId)){
                  relRelRowCell.className = relRelRowCell.className + " top-right"
                }
              }
            }
          }
        }

        var relRelRowTopper = document.createElement("Div")
        relRelRowTopper.className = "top-inner-cross"
        var relRelRowBottom = document.createElement("Div")
        relRelRowBottom.className = "bottom-inner-cross"

        relRelRowRightSideTop = document.createElement("Div")
        relRelRowRightSideTop.className = "right-side"
        relRelRowRightSideBottom = document.createElement("Div")
        relRelRowRightSideBottom.className = "right-side"

        relRelRowLeftSideTop = document.createElement("Div")
        relRelRowLeftSideTop.className = "left-side"
        relRelRowLeftSideBottom = document.createElement("Div")
        relRelRowLeftSideBottom.className = "left-side"

        relRelRowTopper.appendChild(relRelRowLeftSideTop)
        relRelRowTopper.appendChild(relRelRowRightSideTop)

        relRelRowBottom.appendChild(relRelRowLeftSideBottom)
        relRelRowBottom.appendChild(relRelRowRightSideBottom)

        relRelRowCell.appendChild(relRelRowTopper)
        relRelRowCell.appendChild(relRelRowBottom)

        relationRow.appendChild(relRelRowCell)
      }
    };

    filler.appendChild(row)

    filler.appendChild(relationRow)
  };
}

var filler = document.getElementById("fill-me");

treeGenerator(x, filler)

console.log("=-=-=-=-=-=-=-=-=-=-=-=-=-=")

var filler = document.getElementById("fill-me2");

treeGenerator(famtree2, filler)




</script>